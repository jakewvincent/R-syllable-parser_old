# Vowel & consonant lists
all_vowels <- paste(as.character(subset(features,
syllabic == 1)[,"segment"]),
collapse = "|")
all_consonants <- paste(as.character(subset(features,
syllabic == 0)[,"segment"]),
collapse = "|")
# Consonant list
# New function:
cv <- function(text) {
text <- as.character(text)
# Split string into component chars
split_text <- strsplit(text, split = "")
lapply(split_text,
function(y){
gsub(pattern = all_vowels,
replacement = "V",
x = y)
gsub(pattern = all_consonants,
replacement = "C",
x = y)
}) -> cvified
#return(split_text)
return(cvified)
}
cv(animals)
# Define a function that converts a string of IPA characters into a string of Cs and Vs
cvify <- function(text) {
if (NA %in% text) {
warning("Input contains NA(s), which I don't know how to CVify!")
return(0)
} else {
text <- as.character(text)
if (length(text) > 1) {
CVs <- NA
for (word in 1:length(text)) {
split_text <- unlist(strsplit(text[word], split = ""))
split_text_tbl <- matrix(split_text)
CV_string <- NA
for (segment in 1:length(split_text_tbl[,1])) {
features[which(features[,"segment"] == split_text_tbl[segment,1]), "syllabic"] -> syllabic
ifelse(syllabic == "1", "V", "C") -> CV_string[segment]
}
CVified_tbl <- cbind(split_text_tbl, CV_string)
paste(CVified_tbl[,2], collapse = "") -> CVs[word]
}
} else {
split_text <- unlist(strsplit(text, split = ""))
matrix(split_text) -> split_text_tbl
CV_string <- NA
for (segment in 1:length(split_text_tbl[,1])) {
features[which(features[,"segment"] == split_text_tbl[segment,1]), "syllabic"] -> syllabic
ifelse(syllabic == "1", "V", "C") -> CV_string[segment]
}
CVified_tbl <- cbind(split_text_tbl, CV_string)
paste(CVified_tbl[,2], collapse = "") -> CVs
}
return(CVs)
}
}
# Vowel & consonant lists
all_vowels <- paste(as.character(subset(features,
syllabic == 1)[,"segment"]),
collapse = "|")
all_consonants <- paste(as.character(subset(features,
syllabic == 0)[,"segment"]),
collapse = "|")
# Consonant list
# New function:
cv <- function(text) {
text <- as.character(text)
# Split string into component chars
split_text <- strsplit(text, split = "")
lapply(split_text,
function(y){
gsub(pattern = all_vowels,
replacement = "V",
x = gsub(pattern = all_consonants,
replacement = "C",
x = y))
}) -> cvified
#return(split_text)
return(cvified)
}
cv(animals)
cv(animals)
cv(animals) %>% unlist
?unlist
cv(animals) %>% c
# Define a function that converts a string of IPA characters into a string of Cs and Vs
cvify <- function(text) {
if (NA %in% text) {
warning("Input contains NA(s), which I don't know how to CVify!")
return(0)
} else {
text <- as.character(text)
if (length(text) > 1) {
CVs <- NA
for (word in 1:length(text)) {
split_text <- unlist(strsplit(text[word], split = ""))
split_text_tbl <- matrix(split_text)
CV_string <- NA
for (segment in 1:length(split_text_tbl[,1])) {
features[which(features[,"segment"] == split_text_tbl[segment,1]), "syllabic"] -> syllabic
ifelse(syllabic == "1", "V", "C") -> CV_string[segment]
}
CVified_tbl <- cbind(split_text_tbl, CV_string)
paste(CVified_tbl[,2], collapse = "") -> CVs[word]
}
} else {
split_text <- unlist(strsplit(text, split = ""))
matrix(split_text) -> split_text_tbl
CV_string <- NA
for (segment in 1:length(split_text_tbl[,1])) {
features[which(features[,"segment"] == split_text_tbl[segment,1]), "syllabic"] -> syllabic
ifelse(syllabic == "1", "V", "C") -> CV_string[segment]
}
CVified_tbl <- cbind(split_text_tbl, CV_string)
paste(CVified_tbl[,2], collapse = "") -> CVs
}
return(CVs)
}
}
# Vowel & consonant lists
all_vowels <- paste(as.character(subset(features,
syllabic == 1)[,"segment"]),
collapse = "|")
all_consonants <- paste(as.character(subset(features,
syllabic == 0)[,"segment"]),
collapse = "|")
# Consonant list
# New function:
cv <- function(text) {
text <- as.character(text)
# Split string into component chars
#split_text <- strsplit(text, split = "")
lapply(text,
function(y){
# Recursive gsub function. The object that the first gsub function takes is the output of the embedded gsub function.
gsub(pattern = all_vowels,
replacement = "V",
x = gsub(pattern = all_consonants,
replacement = "C",
x = y))
}) -> cvified
#return(split_text)
return(cvified)
}
cv(animals)
animals
cv(animals)
# Define a function that converts a string of IPA characters into a string of Cs and Vs
cvify <- function(text) {
if (NA %in% text) {
warning("Input contains NA(s), which I don't know how to CVify!")
return(0)
} else {
text <- as.character(text)
if (length(text) > 1) {
CVs <- NA
for (word in 1:length(text)) {
split_text <- unlist(strsplit(text[word], split = ""))
split_text_tbl <- matrix(split_text)
CV_string <- NA
for (segment in 1:length(split_text_tbl[,1])) {
features[which(features[,"segment"] == split_text_tbl[segment,1]), "syllabic"] -> syllabic
ifelse(syllabic == "1", "V", "C") -> CV_string[segment]
}
CVified_tbl <- cbind(split_text_tbl, CV_string)
paste(CVified_tbl[,2], collapse = "") -> CVs[word]
}
} else {
split_text <- unlist(strsplit(text, split = ""))
matrix(split_text) -> split_text_tbl
CV_string <- NA
for (segment in 1:length(split_text_tbl[,1])) {
features[which(features[,"segment"] == split_text_tbl[segment,1]), "syllabic"] -> syllabic
ifelse(syllabic == "1", "V", "C") -> CV_string[segment]
}
CVified_tbl <- cbind(split_text_tbl, CV_string)
paste(CVified_tbl[,2], collapse = "") -> CVs
}
return(CVs)
}
}
# Vowel & consonant lists
all_vowels <- paste(as.character(subset(features,
syllabic == 1)[,"segment"]),
collapse = "|")
all_consonants <- paste(as.character(subset(features,
syllabic == 0)[,"segment"]),
collapse = "|")
# Consonant list
# New function:
cv <- function(text) {
text <- as.character(text)
# Split string into component chars
#split_text <- strsplit(text, split = "")
apply(text,
1,
function(y){
# Recursive gsub function. The object that the first gsub function takes is the output of the embedded gsub function.
gsub(pattern = all_vowels,
replacement = "V",
x = gsub(pattern = all_consonants,
replacement = "C",
x = y))
}) -> cvified
#return(split_text)
return(cvified)
}
cv(animals)
cv(armadillo)
?apply
dim(animals)
animsl
animals
# Define a function that converts a string of IPA characters into a string of Cs and Vs
cvify <- function(text) {
if (NA %in% text) {
warning("Input contains NA(s), which I don't know how to CVify!")
return(0)
} else {
text <- as.character(text)
if (length(text) > 1) {
CVs <- NA
for (word in 1:length(text)) {
split_text <- unlist(strsplit(text[word], split = ""))
split_text_tbl <- matrix(split_text)
CV_string <- NA
for (segment in 1:length(split_text_tbl[,1])) {
features[which(features[,"segment"] == split_text_tbl[segment,1]), "syllabic"] -> syllabic
ifelse(syllabic == "1", "V", "C") -> CV_string[segment]
}
CVified_tbl <- cbind(split_text_tbl, CV_string)
paste(CVified_tbl[,2], collapse = "") -> CVs[word]
}
} else {
split_text <- unlist(strsplit(text, split = ""))
matrix(split_text) -> split_text_tbl
CV_string <- NA
for (segment in 1:length(split_text_tbl[,1])) {
features[which(features[,"segment"] == split_text_tbl[segment,1]), "syllabic"] -> syllabic
ifelse(syllabic == "1", "V", "C") -> CV_string[segment]
}
CVified_tbl <- cbind(split_text_tbl, CV_string)
paste(CVified_tbl[,2], collapse = "") -> CVs
}
return(CVs)
}
}
# Vowel & consonant lists
all_vowels <- paste(as.character(subset(features,
syllabic == 1)[,"segment"]),
collapse = "|")
all_consonants <- paste(as.character(subset(features,
syllabic == 0)[,"segment"]),
collapse = "|")
# Consonant list
# New function:
cv <- function(text) {
text <- as.character(text)
# Split string into component chars
#split_text <- strsplit(text, split = "")
apply(text,
2,
function(y){
# Recursive gsub function. The object that the first gsub function takes is the output of the embedded gsub function.
gsub(pattern = all_vowels,
replacement = "V",
x = gsub(pattern = all_consonants,
replacement = "C",
x = y))
}) -> cvified
#return(split_text)
return(cvified)
}
cv(animals)
# Define a function that converts a string of IPA characters into a string of Cs and Vs
cvify <- function(text) {
if (NA %in% text) {
warning("Input contains NA(s), which I don't know how to CVify!")
return(0)
} else {
text <- as.character(text)
if (length(text) > 1) {
CVs <- NA
for (word in 1:length(text)) {
split_text <- unlist(strsplit(text[word], split = ""))
split_text_tbl <- matrix(split_text)
CV_string <- NA
for (segment in 1:length(split_text_tbl[,1])) {
features[which(features[,"segment"] == split_text_tbl[segment,1]), "syllabic"] -> syllabic
ifelse(syllabic == "1", "V", "C") -> CV_string[segment]
}
CVified_tbl <- cbind(split_text_tbl, CV_string)
paste(CVified_tbl[,2], collapse = "") -> CVs[word]
}
} else {
split_text <- unlist(strsplit(text, split = ""))
matrix(split_text) -> split_text_tbl
CV_string <- NA
for (segment in 1:length(split_text_tbl[,1])) {
features[which(features[,"segment"] == split_text_tbl[segment,1]), "syllabic"] -> syllabic
ifelse(syllabic == "1", "V", "C") -> CV_string[segment]
}
CVified_tbl <- cbind(split_text_tbl, CV_string)
paste(CVified_tbl[,2], collapse = "") -> CVs
}
return(CVs)
}
}
# Vowel & consonant lists
all_vowels <- paste(as.character(subset(features,
syllabic == 1)[,"segment"]),
collapse = "|")
all_consonants <- paste(as.character(subset(features,
syllabic == 0)[,"segment"]),
collapse = "|")
# Consonant list
# New function:
cv <- function(text) {
text <- as.character(text)
# Split string into component chars
#split_text <- strsplit(text, split = "")
apply(text,
c(1,2),
function(y){
# Recursive gsub function. The object that the first gsub function takes is the output of the embedded gsub function.
gsub(pattern = all_vowels,
replacement = "V",
x = gsub(pattern = all_consonants,
replacement = "C",
x = y))
}) -> cvified
#return(split_text)
return(cvified)
}
cv(animals)
?sapply
# Define a function that converts a string of IPA characters into a string of Cs and Vs
cvify <- function(text) {
if (NA %in% text) {
warning("Input contains NA(s), which I don't know how to CVify!")
return(0)
} else {
text <- as.character(text)
if (length(text) > 1) {
CVs <- NA
for (word in 1:length(text)) {
split_text <- unlist(strsplit(text[word], split = ""))
split_text_tbl <- matrix(split_text)
CV_string <- NA
for (segment in 1:length(split_text_tbl[,1])) {
features[which(features[,"segment"] == split_text_tbl[segment,1]), "syllabic"] -> syllabic
ifelse(syllabic == "1", "V", "C") -> CV_string[segment]
}
CVified_tbl <- cbind(split_text_tbl, CV_string)
paste(CVified_tbl[,2], collapse = "") -> CVs[word]
}
} else {
split_text <- unlist(strsplit(text, split = ""))
matrix(split_text) -> split_text_tbl
CV_string <- NA
for (segment in 1:length(split_text_tbl[,1])) {
features[which(features[,"segment"] == split_text_tbl[segment,1]), "syllabic"] -> syllabic
ifelse(syllabic == "1", "V", "C") -> CV_string[segment]
}
CVified_tbl <- cbind(split_text_tbl, CV_string)
paste(CVified_tbl[,2], collapse = "") -> CVs
}
return(CVs)
}
}
# Vowel & consonant lists
all_vowels <- paste(as.character(subset(features,
syllabic == 1)[,"segment"]),
collapse = "|")
all_consonants <- paste(as.character(subset(features,
syllabic == 0)[,"segment"]),
collapse = "|")
# Consonant list
# New function:
cv <- function(text) {
text <- as.character(text)
# Split string into component chars
#split_text <- strsplit(text, split = "")
sapply(text,
function(y){
# Recursive gsub function. The object that the first gsub function takes is the output of the embedded gsub function.
gsub(pattern = all_vowels,
replacement = "V",
x = gsub(pattern = all_consonants,
replacement = "C",
x = y))
}) -> cvified
#return(split_text)
return(cvified)
}
cv(animals)
cv(armadillo)
cv(armadillo) %>% t
cv(armadillo) %>% left(., 1)
features
subset(features, sonority == 1)
subset(features, sonority == 0)
subset(features, sonority == 2)
subset(features, sonority == 1)
subset(features, segment == "l")
subset(features, segment == "w")
stops_affs <- paste(as.character(subset(features,
continuant == 0)[,"segment"]),
collapse = "|")
stops_affs
stops_affs <- paste(as.character(subset(features,
continuant == 0 & sonorant == 0)[,"segment"]),
collapse = "|")
stops_affs
subset(features, nasal == 1)
subset(features, consonantal == 1)
subset(features, consonantal == 0 & syllabic == 0)
stops_affs <- paste(as.character(subset(features,
continuant == 0 & sonorant == 0)[,"segment"]),
collapse = "|")
fricatives <- paste(as.character(subset(features,
sonorant == 0 & continuant == 1)[,"segment"]),
collapse = "|")
nasals <- paste(as.character(subset(features,
nasal == 1)[,"segment"]),
collapse = "|")
liquids <-  paste(as.character(subset(features,
consonantal == 1 & approximant == 1)[,"segment"]),
collapse = "|")
glides <- paste(as.character(subset(features,
syllabic == 0 & consonantal == 0)[,"segment"]),
collapse = "|")
vowels <- paste(as.character(subset(features,
syllabic == 1)[,"segment"]),
collapse = "|")
vowels
subset(features, sonority == "6")
?gsub
# Define a function that replaces IPA characters with their sonority value
# Old function
sonority_old <- function(text){
text <- as.character(text)
if (length(text) > 1) {
s_levels <- NA
for (word in 1:length(text)) {
split_text <- unlist(strsplit(text[word], split = ""))
split_text_tbl <- matrix(split_text)
son_string <- NA
for (seg in 1:length(split_text_tbl[,1])) {
features[which(features[,"segment"] == split_text_tbl[seg,1]), "sonority"] -> son_string[seg]
}
sonified_tbl <- cbind(split_text_tbl, son_string)
paste(sonified_tbl[,2], collapse = "") -> s_levels[word]
}
} else {
split_text <- unlist(strsplit(text, split = ""))
matrix(split_text) -> split_text_tbl
son_string <- NA
for (seg in 1:length(split_text_tbl[,1])) {
features[which(features[,"segment"] == split_text_tbl[seg,1]), "sonority"] -> son_string[seg]
}
sonified_tbl <- cbind(split_text_tbl, son_string)
paste(sonified_tbl[,2], collapse = "") -> s_levels
}
return(s_levels)
}
# Make vector of IPA characters for each sonority level
# Assume there are 6 sonority levels
stops_affs <- paste(as.character(subset(features,
continuant == 0 & sonorant == 0)[,"segment"]),
collapse = "|")
fricatives <- paste(as.character(subset(features,
sonorant == 0 & continuant == 1)[,"segment"]),
collapse = "|")
nasals <- paste(as.character(subset(features,
nasal == 1)[,"segment"]),
collapse = "|")
liquids <-  paste(as.character(subset(features,
consonantal == 1 & approximant == 1)[,"segment"]),
collapse = "|")
glides <- paste(as.character(subset(features,
syllabic == 0 & consonantal == 0)[,"segment"]),
collapse = "|")
vowels <- paste(as.character(subset(features,
syllabic == 1)[,"segment"]),
collapse = "|")
# New function
sonority <- function(text) {
text <- as.character(text)
sapply(text,
function(y){
gsub(pattern = stops_affs,
replacement = "1",
x = gsub(pattern = fricatives,
replacement = "2",
x = gsub(pattern = nasals,
replacement = "3",
x = gsub(pattern = liquids,
replacement = "4",
x = gsub(pattern = glides,
replacement = "5",
x = gsub(pattern = vowels,
replacement = "6",
x = y))))))
})
}
sonority(animals)
sonority(armadillo)
