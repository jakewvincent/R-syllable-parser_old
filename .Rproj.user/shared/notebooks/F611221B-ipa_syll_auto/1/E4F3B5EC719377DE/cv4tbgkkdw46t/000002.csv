"0","# Define a function that converts a string of IPA characters into a string of Cs and Vs"
"0","cvify <- function(text) {"
"0","  if (length(text) > 1) {"
"0","    CVs <- NA"
"0","    for (word in 1:length(text)) {"
"0","      split_text <- unlist(strsplit(text[word], split = """"))"
"0","      split_text_tbl <- matrix(split_text)"
"0","      CV_string <- NA"
"0","      for (seg in 1:length(split_text_tbl[,1])) {"
"0","        features[which(features[,""segment""] == split_text_tbl[seg,1]), ""syllabic""] -> syll"
"0","        ifelse(syll == ""1"", ""V"", ""C"") -> CV_string[seg]"
"0","      }"
"0","      CVified_tbl <- cbind(split_text_tbl, CV_string)"
"0","      paste(CVified_tbl[,2], collapse = """") -> CVs[word]"
"0","    }"
"0","  } else {"
"0","  split_text <- unlist(strsplit(text, split = """"))"
"0","  matrix(split_text) -> split_text_tbl"
"0","  CV_string <- NA"
"0","  for (seg in 1:length(split_text_tbl[,1])) {"
"0","    features[which(features[,""segment""] == split_text_tbl[seg,1]), ""syllabic""] -> syll"
"0","    ifelse(syll == ""1"", ""V"", ""C"") -> CV_string[seg]"
"0","  }"
"0","  CVified_tbl <- cbind(split_text_tbl, CV_string)"
"0","  paste(CVified_tbl[,2], collapse = """") -> CVs"
"0","  }"
"0","  return(CVs)"
"0","}"
"0",""
"0","sonority <- function(text){"
"0","    if (length(text) > 1) {"
"0","    s_levels <- NA"
"0","    for (word in 1:length(text)) {"
"0","      split_text <- unlist(strsplit(text[word], split = """"))"
"0","      split_text_tbl <- matrix(split_text)"
"0","      son_string <- NA"
"0","      for (seg in 1:length(split_text_tbl[,1])) {"
"0","        features[which(features[,""segment""] == split_text_tbl[seg,1]), ""sonority""] -> son_string[seg]"
"0","      }"
"0","      sonified_tbl <- cbind(split_text_tbl, son_string)"
"0","      paste(sonified_tbl[,2], collapse = """") -> s_levels[word]"
"0","    }"
"0","  } else {"
"0","  split_text <- unlist(strsplit(text, split = """"))"
"0","  matrix(split_text) -> split_text_tbl"
"0","  son_string <- NA"
"0","  for (seg in 1:length(split_text_tbl[,1])) {"
"0","    features[which(features[,""segment""] == split_text_tbl[seg,1]), ""sonority""] -> son_string[seg]"
"0","  }"
"0","  sonified_tbl <- cbind(split_text_tbl, son_string)"
"0","  paste(sonified_tbl[,2], collapse = """") -> s_levels"
"0","  }"
"0","  return(s_levels)"
"0","}"
