"0","syllabify_v0.1 <- function(text) {"
"0","  # Make a df to store syllabification info"
"0","  syllabification <- data.frame(NA, NA, NA, NA)"
"0","  # Assign colnames"
"0","  colnames(syllabification) <- c(""word"", ""CV_seq"", ""son_seq"", ""vowel_pos"")"
"0","  # Give df the unicode_df class so it's printed correctly"
"0","  class(syllabification) <- c(""unicode_df"", ""data.frame"")"
"0","  # Syllabify each word in the input, adding its information to each row"
"0","  for (word in 1:length(text)) {"
"0","    # Add that word and CV sequence info and sonority info to the first row of the df"
"0","    syllabification[word,1:3] <- c(text[word],"
"0","                                   cvify(text[word]),"
"0","                                   sonority(text[word]))"
"0","    # Get the positions (indices) of the vowels in the word, collapse into a string, and put in table"
"0","    vowels <- which(unlist(strsplit(as.character(syllabification[word,""son_seq""]), split = """")) == 6)"
"0","    n_sylls <- length(vowels)"
"0","    vowel_pos <- paste(vowels, collapse = "", "")"
"0","    syllabification[word,""vowel_pos""] <- vowel_pos"
"0","    "
"0","    # Perform first-pass syllabification, putting any consonants possible into onsets (Parse > Onset > NoCoda)"
"0","        # Make an object that will store the position of the last vowel parsed. start w/ 0."
"0","        last <- 0"
"0","        # Split up the word into a vector, where each character has a slot in the vector"
"0","        split_word <- unlist(strsplit(text[word], split = """"))"
"0","    for (syllable in 1:n_sylls) {"
"0","      # Get all the segments up to the vowel, collapse them, and store them in the df as a syllable"
"0","      syllabification[word, (4+syllable)] <- paste(split_word[(last+1):vowels[syllable]], collapse = """")"
"0","      # Save the linear string position of the last vowel in the word that was parsed into a syllable"
"0","      last <- vowels[syllable]"
"0","      # If we're at the last syllable, ..."
"0","      if (syllable == n_sylls) {"
"0","        # And if there's something after the vowel (i.e. the pos'n of last vowel â‰  length of word), ..."
"0","        if (vowels[syllable] != length(split_word)) {"
"0","          # Then tack the remaining stuff onto the end of the last syllable"
"0","          syllabification[word, 4+syllable] <- paste(c(syllabification[word, 4+syllable], split_word[(last+1):length(split_word)]), collapse = """")"
"0","        }"
"0","      }"
"0","    }"
"0","  }"
"0","  # Label the syllable columns"
"0","  colnames(syllabification)[5:length(colnames(syllabification))] <- paste(""\u03C3"", seq_along(5:length(colnames(syllabification))), sep = """")"
"0","  return(syllabification)"
"0","}"
